{"version":3,"sources":["components/seekerRenderer.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","components/whoAmI.js","App.js","serviceWorker.js","index.js"],"names":["AFFIRMATIONS","lightColors","darkColors","numAffirmationsProbAcc","HEIGHTS","buildImage","seekerDetails","affirmationElements","shuffledAffirmations","sort","Math","random","shuffledHeights","affirmations","level","numAffirmations","push","affirmation","x","y","fill","color","map","p","createRandomAffirmations","background","createRandomSeeker","i","isLight","floor","length","rand","str","seekerData","Buffer","from","toString","SeekerRenderer","seeker","size","style","loading","isAtMaxLevel","blockchain","isOwner","uriMeta","JSON","parse","window","atob","uri","split","className","src","image","name","err","console","log","initialState","account","seekerToken","web3","errorMsg","blockchainReducer","state","action","type","payload","allSeekers","allOwnerSeekers","error","dataReducer","rootReducer","combineReducers","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","getAllSeekers","call","getOwnerSeekers","connectFailed","updateAccount","WhoAmI","useState","setPosition","ref","useRef","updatePosition","element","document","querySelector","innerWidth","innerHeight","h","top","left","useEffect","current","addEventListener","removeEventListener","id","onMouseOver","App","useDispatch","useSelector","setLoading","setNFTs","startMintingProcess","paddedNumber","padStart","nextSeekerName","dataURI","metadata","description","encodedMetadata","btoa","stringify","mintNFT","_account","mint","send","gasPrice","gas","maxPriorityFeePerGas","value","utils","toWei","once","then","receipt","filteredSeekers","filter","forEach","nft","fetch","response","json","metaData","prevState","catch","onClick","e","preventDefault","ethereum","Web3","eth","requestAccounts","request","method","accounts","networkId","SeekerToken","networks","seekerTokeNetworkdata","Contract","abi","address","on","location","reload","disabled","item","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2184194.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/card.css\";\r\nimport \"../styles/globalStyles.css\";\r\n\r\nconst QUESTIONS = [\"Who am I?\", \"Whose dream is this?\", \"\"];\r\nconst AFFIRMATIONS = [\r\n  \"enough.\",\r\n  \"authentic.\",\r\n  \"unique.\",\r\n  \"worthy.\",\r\n  \"powerful.\",\r\n  \"inspired.\",\r\n  \"loved.\",\r\n  \"lovable.\",\r\n  \"whole.\",\r\n  \"eternal.\",\r\n  \"honest.\",\r\n  \"fun.\",\r\n  \"playful.\",\r\n  \"creative.\",\r\n  \"connected.\",\r\n  \"intuitive.\",\r\n  \"supported.\",\r\n  \"supportive.\",\r\n  \"kind.\",\r\n  \"grateful.\",\r\n  \"fearless.\",\r\n  \"passionate.\",\r\n  \"blessed.\",\r\n  \"magic.\",\r\n  \"free.\",\r\n  \"protected.\",\r\n  \"peaceful.\",\r\n  \"generous.\",\r\n  \"limitless.\",\r\n  \"joyful.\",\r\n  \"beautiful.\",\r\n  \"abundant.\",\r\n  \"confident.\",\r\n  \"strong.\",\r\n  \"radiant.\",\r\n  \"resilient.\",\r\n  \"healthy.\",\r\n];\r\nconst lightColors = [\r\n  \"rgb(242, 204, 143)\",\r\n  \"rgb(129, 178, 154)\",\r\n  \"rgb(222,164,126)\",\r\n  \"rgb(197,216,109)\",\r\n  \"rgb(167,190,211)\",\r\n  \"rgb(255,222,60)\",\r\n  \"rgb(115,226,167)\",\r\n];\r\nconst darkColors = [\r\n  \"rgb(61, 64, 91)\",\r\n  \"rgb(224, 122, 95)\",\r\n  \"rgb(238,75,106)\",\r\n  \"rgb(67,124,144)\",\r\n  \"rgb(159,126,105)\",\r\n  \"rgb(21,122,110)\",\r\n  \"rgb(73,159,104)\",\r\n  \"rgb(165,70,87)\",\r\n];\r\nconst allColors = [...lightColors, ...darkColors];\r\n\r\nconst PATHS = {\r\n  south: \"south\",\r\n  southEast: \"south-east\",\r\n  east: \"east\",\r\n  northEast: \"north-east\",\r\n  north: \"north\",\r\n  northWest: \"north-west\",\r\n  west: \"west\",\r\n  southWest: \"south-west\",\r\n  random: \"random\",\r\n};\r\n\r\nconst numAffirmationsProbabilities = [1 / 3, 4 / 15, 1 / 5, 2 / 15, 1 / 15];\r\nconst numAffirmationsProbAcc = [5 / 15, 9 / 15, 12 / 15, 14 / 15, 1];\r\n\r\nconst HEIGHTS = [250, 550, 850, 1150, 1400, 1700, 2000, 2300, 2600, 2900];\r\n\r\nconst BUSTED_PIXEL_WIDTH = 3000;\r\nconst BUSTED_PIXEL_HEIGHT = 3000;\r\nconst MAX_NUM_AFFIRMATIONS = 5;\r\n\r\nconst btoa = function (str) {\r\n  return Buffer.from(str).toString(\"base64\");\r\n};\r\n\r\nfunction buildAffirmation(p) {\r\n  return `<text font-size=\"200\" x=\"${p.x}\" y=\"${p.y}\" fill=\"${p.fill}\">I am ${p.affirmation}</text>`;\r\n}\r\n\r\nfunction createRandomAffirmations(seekerDetails) {\r\n  const shuffledAffirmations = AFFIRMATIONS.sort(() => 0.5 - Math.random());\r\n\r\n  const shuffledHeights = HEIGHTS.sort(() => 0.5 - Math.random());\r\n\r\n  const affirmations = [];\r\n\r\n  for (let level = 0; level < seekerDetails.numAffirmations; level++) {\r\n    affirmations.push({\r\n      affirmation: shuffledAffirmations[level],\r\n      x: 200 + Math.random() * BUSTED_PIXEL_WIDTH * 0.5,\r\n      y: shuffledHeights[level],\r\n      fill: seekerDetails.color,\r\n    });\r\n  }\r\n\r\n  let newArray = affirmations.map((affirmation) => {\r\n    return buildAffirmation(affirmation);\r\n  });\r\n  return newArray;\r\n}\r\n\r\nfunction buildImage(seekerDetails) {\r\n  let affirmationElements = createRandomAffirmations(seekerDetails);\r\n\r\n  return `<svg  width=\"300\" height=\"300\" viewBox=\"0 0 ${BUSTED_PIXEL_WIDTH} ${BUSTED_PIXEL_HEIGHT}\" xmlns='http://www.w3.org/2000/svg'> <rect width=\"100%\" height=\"100%\" fill=\"${seekerDetails.background}\"/>${affirmationElements}</svg>`;\r\n}\r\n\r\nexport function createRandomSeeker() {\r\n  const isLight = Math.random() > 0.5;\r\n  const background = isLight\r\n    ? lightColors[Math.floor(Math.random() * lightColors.length)]\r\n    : darkColors[Math.floor(Math.random() * darkColors.length)];\r\n  const color = isLight ? \"#000000\" : \"#ffffff\";\r\n\r\n  let rand = Math.random();\r\n  let i;\r\n  for (i = 0; i < numAffirmationsProbAcc.length; i++) {\r\n    if (rand < numAffirmationsProbAcc[i]) {\r\n      break;\r\n    }\r\n  }\r\n  let seekerDetails = {\r\n    numAffirmations: i + 1,\r\n    background: background,\r\n    color: color,\r\n  };\r\n  const seekerData = buildImage(seekerDetails);\r\n  var encodedSeekerSVG = \"data:image/svg+xml;base64,\" + btoa(seekerData);\r\n  return encodedSeekerSVG;\r\n}\r\n\r\nconst SeekerRenderer = ({\r\n  seeker = null,\r\n  size = 200,\r\n  style,\r\n  loading,\r\n  isAtMaxLevel,\r\n  blockchain,\r\n  isOwner,\r\n}) => {\r\n  if (!seeker) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const uriMeta = JSON.parse(window.atob(seeker.uri.split(\",\")[1]));\r\n    return (\r\n      <div className=\"card columns\">\r\n        <img src={uriMeta.image} />\r\n\r\n        <div className=\"container row\">\r\n          <div className=\"card-data\">\r\n            <p className=\"textTitle card-data\">\r\n              NAME:\r\n              <span className=\"item-value\">{uriMeta.name}</span>\r\n            </p>\r\n            {/* <p className=\"textDescription card-data\">ID: {seeker.id}</p> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n\r\n  return <h1>hello</h1>;\r\n};\r\n\r\nexport default SeekerRenderer;\r\n","const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  seekerToken: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        seekerToken: action.payload.seekerToken,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  allSeekers: [],\r\n  allOwnerSeekers: [],\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        allSeekers: action.payload.allSeekers,\r\n        allOwnerSeekers: action.payload.allOwnerSeekers,\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let allSeekers = await store\r\n        .getState()\r\n        .blockchain.seekerToken.methods.getAllSeekers()\r\n        .call();\r\n      let allOwnerSeekers = await store\r\n        .getState()\r\n        .blockchain.seekerToken.methods.getOwnerSeekers()\r\n        .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          allSeekers,\r\n          allOwnerSeekers,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n","// constants\r\nimport Web3 from \"web3\";\r\nimport SeekerToken from \"../../contracts/SeekerToken.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n\r\n    if (window.ethereum) {\r\n      let web3 = new Web3(window.ethereum);\r\n\r\n      try {\r\n        web3.eth.requestAccounts().then(console.log);\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (!accounts || !accounts[0]) {\r\n          throw \"connect wallet.\";\r\n        }\r\n        const networkId = await window.ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n\r\n        const seekerTokeNetworkdata = await SeekerToken.networks[networkId];\r\n\r\n        if (seekerTokeNetworkdata) {\r\n          const seekerToken = new web3.eth.Contract(\r\n            SeekerToken.abi,\r\n            seekerTokeNetworkdata.address\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              seekerToken: seekerToken,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n            console.log(\"accountsChanged \", accounts[0]);\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          window.ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to Polygon.\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    console.log(\"updateAccount\", account);\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./whoAmI.css\";\r\nconst WhoAmI = () => {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n\r\n  const ref = useRef();\r\n  function updatePosition() {\r\n    const element = document.querySelector(\"#who-am-i\");\r\n    const x = 100 + Math.random() * (window.innerWidth - 200);\r\n    const y = 100 + Math.random() * (window.innerHeight - 200);\r\n    const h = Math.random() * 360;\r\n    setPosition({ x: x, y: y });\r\n    element.style.top = `${y}px`;\r\n    element.style.left = `${x}px`;\r\n    element.style.color = `hsl(${h},80%,70%)`;\r\n  }\r\n  useEffect(() => {\r\n    if (ref && ref.current) {\r\n      ref.current.addEventListener(\"mouseover\", updatePosition, false);\r\n      return function cleanup() {\r\n        if (ref && ref.current) {\r\n          ref.current.removeEventListener(\"mouseover\", updatePosition, false);\r\n        }\r\n      };\r\n    }\r\n  }, [ref]);\r\n\r\n  return (\r\n    <h1\r\n      ref={ref}\r\n      className=\"who-am-i\"\r\n      id=\"who-am-i\"\r\n      onMouseOver={updatePosition}\r\n    >\r\n      Who am I?\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default WhoAmI;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport \"./styles/globalStyles.css\";\r\n//import _color from \"./assets/images/bg/_color.png\";\r\nimport SeekerRenderer, {\r\n  createRandomSeeker,\r\n} from \"./components/seekerRenderer\";\r\n\r\nimport \"./styles/card.css\";\r\nimport WhoAmI from \"./components/whoAmI\";\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [loading, setLoading] = useState(false);\r\n  const [NFTs, setNFTs] = useState([]);\r\n  function createRandomNum() {\r\n    return Math.floor(Math.random() * 10 ** 16);\r\n  }\r\n  const startMintingProcess = () => {\r\n    const name = nextSeekerName();\r\n    const description =\r\n      \"Whether black, white, or any color in between, I am limitless.\";\r\n    const dataURI = createRandomSeeker();\r\n    const metadata = { name: name, description: description, image: dataURI };\r\n    //getImageData();\r\n    const encodedMetadata =\r\n      \"data:application/json;base64,\" + window.btoa(JSON.stringify(metadata));\r\n    console.log(\"encodedMetadata\", dataURI);\r\n    mintNFT(blockchain.account, encodedMetadata);\r\n  };\r\n\r\n  const getImageData = () => {\r\n    var captureEl = document.querySelector(\"#capture\");\r\n    var b64 = \"data:image/svg+xml;base64,\" + window.btoa(captureEl.outerHTML);\r\n\r\n    // 3. convert svg to base64\r\n  };\r\n  const mintNFT = (_account, uri) => {\r\n    console.log(\"minting uri\", uri);\r\n    setLoading(true);\r\n    blockchain.seekerToken.methods\r\n      .mint(uri)\r\n      .send({\r\n        from: _account,\r\n        gasPrice: \"20000000\",\r\n        gas: 6700000,\r\n        maxPriorityFeePerGas: 2999999987,\r\n        value: blockchain.web3.utils.toWei(\"0.01\", \"ether\"),\r\n      })\r\n      .once(\"error\", (err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      })\r\n      .then((receipt) => {\r\n        setLoading(false);\r\n        console.log(receipt);\r\n        dispatch(fetchData(blockchain.account));\r\n      });\r\n  };\r\n\r\n  const fetchMetadataForNFTs = () => {\r\n    setNFTs([]);\r\n    data.allSeekers.forEach((nft) => {\r\n      fetch(nft.uri)\r\n        .then((response) => response.json())\r\n        .then((metaData) => {\r\n          setNFTs((prevState) => [\r\n            ...prevState,\r\n            { id: nft.id, metaData: metaData },\r\n          ]);\r\n        })\r\n        .catch((err) => console.log);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMetadataForNFTs();\r\n  }, [data.allSeekers]);\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account != \"\" && blockchain.seekerToken != null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  }, [blockchain.seekerToken, dispatch]);\r\n\r\n  function isAtMaxLevel(level) {\r\n    return level >= 10;\r\n  }\r\n\r\n  function isOwner(seeker) {\r\n    const filteredSeekers = data.allOwnerSeekers.filter((seekerData) => {\r\n      return seekerData.id === seeker.id;\r\n    });\r\n    console.log(\r\n      \"does include? \",\r\n      data.allOwnerSeekers,\r\n      seeker,\r\n      filteredSeekers.length == 1\r\n    );\r\n    return filteredSeekers.length == 1;\r\n  }\r\n\r\n  function nextSeekerName() {\r\n    let paddedNumber = `${data.allSeekers.length}`;\r\n    paddedNumber = paddedNumber.padStart(4, \"0\");\r\n    return `Seeker #${paddedNumber}`;\r\n  }\r\n\r\n  function capture() {\r\n    var captureEl = document.querySelector(\"#capture\");\r\n    captureEl.style.fontFeatureSettings = '\"liga\" 0';\r\n    var options = {\r\n      quality: 0.95,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <WhoAmI />\r\n      <div className=\"screen page-wrapper\">\r\n        {blockchain.account == \"\" || blockchain.account == null ? (\r\n          <div className=\"container column connect\">\r\n            <div className=\"spacerMedium\" />\r\n\r\n            <button\r\n              className=\"connect\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                dispatch(connect());\r\n              }}\r\n            >\r\n              Connect\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"container column \">\r\n            <div className=\"spacerMedium\" />\r\n            <div className=\"mint\">\r\n              <button\r\n                disabled={loading ? 1 : 0}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  startMintingProcess();\r\n                }}\r\n              >\r\n                Mint\r\n              </button>\r\n            </div>\r\n            <div className=\"spacerSmall\" />\r\n            <div className=\"container row nft-list\">\r\n              {data.allSeekers.map((item) => {\r\n                return (\r\n                  <div className=\"nft-container\">\r\n                    <SeekerRenderer\r\n                      seeker={item}\r\n                      isOwner={isOwner}\r\n                      loading={loading}\r\n                    />\r\n                    <div className=\"spacerSmall\" />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/* <div className=\"mint\">\r\n              <button\r\n                disabled={loading ? 1 : 0}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  mintNFT(blockchain.account, nextSeekerName());\r\n                }}\r\n              >\r\n                Mint\r\n              </button>\r\n            </div>\r\n            */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles/reset.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}